variables:
  IMAGE_TAG: "2019-09-17-3"

services:
  - docker:dind

image: docker:latest

stages:
  - docker
  - initrd
  - test
  
before_script:
  - echo -n $CI_JOB_TOKEN | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY

build-docker:
  stage: docker
  tags: 
    - yocto
  script:
    - docker pull $CI_REGISTRY_IMAGE:$IMAGE_TAG && exit 0 || true
    - >
      docker build
      --tag $CI_REGISTRY_IMAGE:$IMAGE_TAG
      scripts/
    - docker push $CI_REGISTRY_IMAGE:$IMAGE_TAG

build-initrd:
  tags: 
    - yocto
  stage: initrd
  image: $CI_REGISTRY_IMAGE:$IMAGE_TAG
  
  before_script:
    - mkdir -p results
    - rm -rf /tmp/build_env
    - git clone git://github.com/openembedded/openembedded-core --branch=thud --depth=1 /tmp/build_env
    - git clone git://github.com/openembedded/bitbake --branch=1.40 --depth=1 /tmp/build_env/bitbake
    - git clone $(pwd) /tmp/build_env/$(basename $(pwd))

  script:
    - bash scripts/build.sh /tmp/build_env libretech-cc amlogic-image-headless-initrd
    - cp -ar /tmp/build_env/build/tmp*/deploy/images/* $CI_PROJECT_DIR/results/

  artifacts:
    when: always
    paths:
      - results/

.test:
  stage: test
  tags:
    - yocto
  image: $CI_REGISTRY_IMAGE:$IMAGE_TAG
  script:
    - scripts/generate_lava.py
        --template scripts/meta-meson.yml.jinja2
        --base-artifacts-url $CI_PROJECT_URL/-/jobs/$CI_JOB_ID/artifacts/raw/results
        --device-type ${DEVICE_TYPE}
        --kernel-image-name ${KERNEL_IMAGE_NAME}
        --dtb-name ${DTB_NAME}
        --ramdisk-name ${RAMDISK_NAME}
        --ramdisk-compression ${RAMDISK_COMP}
        --boot-method ${BOOT_METHOD}
        --tags "${LAVA_TAGS}"
        > results/meta-meson.yml
    - lava_job_id=`lavacli jobs submit $CI_PROJECT_DIR/results/meta-meson.yml`
    - echo $lava_job_id
    - lavacli jobs logs $lava_job_id
    - lavacli jobs show $lava_job_id
  artifacts:
    when: always
    paths:
      - results/
