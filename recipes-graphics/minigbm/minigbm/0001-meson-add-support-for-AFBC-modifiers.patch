From 1133c14481a2cfe1f652f803cebdd1ffefd4e439 Mon Sep 17 00:00:00 2001
From: Neil Armstrong <narmstrong@baylibre.com>
Date: Fri, 5 Apr 2019 15:49:54 +0000
Subject: [PATCH] meson: add support for AFBC modifiers

---
 meson.c | 108 ++++++++++++++++++++++++++++++++++++++++++++++++++++++--
 1 file changed, 105 insertions(+), 3 deletions(-)

diff --git a/meson.c b/meson.c
index 523bf71..8f9a8cc 100644
--- a/meson.c
+++ b/meson.c
@@ -6,6 +6,11 @@
 
 #ifdef DRV_MESON
 
+#include <stdbool.h>
+#include <stdio.h>
+#include <string.h>
+#include <sys/mman.h>
+#include <errno.h>
 #include "drv_priv.h"
 #include "helpers.h"
 #include "util.h"
@@ -15,18 +20,115 @@ static const uint32_t render_target_formats[] = { DRM_FORMAT_ARGB8888, DRM_FORMA
 static int meson_init(struct driver *drv)
 {
 	drv_add_combinations(drv, render_target_formats, ARRAY_SIZE(render_target_formats),
-			     &LINEAR_METADATA, BO_USE_RENDER_MASK);
+			&LINEAR_METADATA, BO_USE_RENDER_MASK);
 
 	return drv_modify_linear_combinations(drv);
 }
 
+static const uint64_t get_vendor_modifier(const uint64_t *list, uint32_t count,
+					  uint64_t base_modifier)
+{
+	unsigned int i;
+
+	for (i = 0; i < count; i++)
+		if ((list[i] & base_modifier) == base_modifier)
+			return list[i];
+
+	return DRM_FORMAT_MOD_INVALID;
+}
+
+#define MESON_MAX_AFBC_WIDTH (2056)
+#define AFBC_PIXELS_PER_BLOCK 16
+#define AFBC_HEADER_BYTES_PER_BLOCKENTRY 16
+#define AFBC_BODY_BYTE_ALIGNMENT 1024
+
+static int meson_bo_create_with_modifiers(struct bo *bo, uint32_t width, uint32_t height,
+					  uint32_t format, const uint64_t * modifiers, uint32_t count)
+{
+	struct drm_mode_create_dumb create_dumb;
+	uint64_t mod;
+	int ret;
+
+	memset(&create_dumb, 0, sizeof(create_dumb));
+
+	mod = get_vendor_modifier(modifiers, count, DRM_FORMAT_MOD_ARM_AFBC(0));
+	if (mod != DRM_FORMAT_MOD_INVALID && width <= MESON_MAX_AFBC_WIDTH) {
+		unsigned int w_aligned, h_aligned;
+		unsigned int pixel_size, stride;
+		unsigned int total_height;
+		unsigned int total_size;
+		unsigned int nblocks;
+
+		pixel_size = drv_bytes_per_pixel_from_format(format, 0);
+
+		if (mod & AFBC_FORMAT_MOD_BLOCK_SIZE_16x16) {
+			w_aligned = ALIGN(width, 16);
+			h_aligned = ALIGN(height, 16);
+		} else if (mod & AFBC_FORMAT_MOD_BLOCK_SIZE_32x8) {
+			w_aligned = ALIGN(width, 32);
+			h_aligned = ALIGN(height, 16);
+		} else {
+			drv_log("invalid AFBC modifier\n");
+			return -EINVAL;
+		}
+
+		stride = ALIGN(w_aligned * pixel_size, 64);
+
+		nblocks = DIV_ROUND_UP(w_aligned, AFBC_PIXELS_PER_BLOCK) *
+			  DIV_ROUND_UP(h_aligned, AFBC_PIXELS_PER_BLOCK);
+
+		total_size = stride * h_aligned +
+			     ALIGN(nblocks * AFBC_HEADER_BYTES_PER_BLOCKENTRY,
+				   AFBC_BODY_BYTE_ALIGNMENT);
+
+		total_height = DIV_ROUND_UP(total_size, stride);
+
+		bo->format_modifiers[0] = mod;
+
+		ret = drv_dumb_bo_create(bo, stride, total_height, format, 0);
+	} else {
+		mod = get_vendor_modifier(modifiers, count, DRM_FORMAT_MOD_LINEAR);
+		if (mod == DRM_FORMAT_MOD_LINEAR) {
+			bo->format_modifiers[0] = DRM_FORMAT_MOD_LINEAR;
+
+			ret = drv_dumb_bo_create(bo, width, height, format, 0);
+		} else {
+			drv_log("no usable modifier found\n");
+			return -EINVAL;
+		}
+	}
+
+	return ret;
+}
+
+static int meson_bo_create(struct bo *bo, uint32_t width, uint32_t height, uint32_t format,
+			   uint64_t use_flags)
+{
+	uint64_t modifiers[] = { DRM_FORMAT_MOD_LINEAR };
+
+	return meson_bo_create_with_modifiers(bo, width, height, format, modifiers, 1);
+}
+
+void *meson_dumb_bo_map(struct bo *bo, struct vma *vma, size_t plane, uint32_t map_flags)
+{
+	uint64_t mod = get_vendor_modifier(bo->format_modifiers, 1,
+					   DRM_FORMAT_MOD_ARM_AFBC(0));
+
+	/* Avoid mapping AFBC bo */
+	if (mod != DRM_FORMAT_MOD_INVALID)
+		return MAP_FAILED;
+
+	return drv_dumb_bo_map(bo, vma, plane, map_flags);
+}
+
 const struct backend backend_meson = {
 	.name = "meson",
 	.init = meson_init,
-	.bo_create = drv_dumb_bo_create,
+	.bo_create = meson_bo_create,
+	.bo_create_with_modifiers = meson_bo_create_with_modifiers,
 	.bo_destroy = drv_dumb_bo_destroy,
 	.bo_import = drv_prime_bo_import,
-	.bo_map = drv_dumb_bo_map,
+	.bo_map = meson_dumb_bo_map,
 	.bo_unmap = drv_bo_munmap,
 };
 
